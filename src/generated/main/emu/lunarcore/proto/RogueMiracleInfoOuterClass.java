// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueMiracleInfoOuterClass {
  /**
   * Protobuf type {@code RogueMiracleInfo}
   */
  public static final class RogueMiracleInfo extends ProtoMessage<RogueMiracleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .RogueMiracleInfoData rogue_miracle_info_data = 4;</code>
     */
    private final RogueMiracleInfoDataOuterClass.RogueMiracleInfoData rogueMiracleInfoData = RogueMiracleInfoDataOuterClass.RogueMiracleInfoData.newInstance();

    private RogueMiracleInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueMiracleInfo}
     */
    public static RogueMiracleInfo newInstance() {
      return new RogueMiracleInfo();
    }

    /**
     * <code>optional .RogueMiracleInfoData rogue_miracle_info_data = 4;</code>
     * @return whether the rogueMiracleInfoData field is set
     */
    public boolean hasRogueMiracleInfoData() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .RogueMiracleInfoData rogue_miracle_info_data = 4;</code>
     * @return this
     */
    public RogueMiracleInfo clearRogueMiracleInfoData() {
      bitField0_ &= ~0x00000001;
      rogueMiracleInfoData.clear();
      return this;
    }

    /**
     * <code>optional .RogueMiracleInfoData rogue_miracle_info_data = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueMiracleInfoData()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueMiracleInfoDataOuterClass.RogueMiracleInfoData getRogueMiracleInfoData() {
      return rogueMiracleInfoData;
    }

    /**
     * <code>optional .RogueMiracleInfoData rogue_miracle_info_data = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueMiracleInfoDataOuterClass.RogueMiracleInfoData getMutableRogueMiracleInfoData() {
      bitField0_ |= 0x00000001;
      return rogueMiracleInfoData;
    }

    /**
     * <code>optional .RogueMiracleInfoData rogue_miracle_info_data = 4;</code>
     * @param value the rogueMiracleInfoData to set
     * @return this
     */
    public RogueMiracleInfo setRogueMiracleInfoData(
        final RogueMiracleInfoDataOuterClass.RogueMiracleInfoData value) {
      bitField0_ |= 0x00000001;
      rogueMiracleInfoData.copyFrom(value);
      return this;
    }

    @Override
    public RogueMiracleInfo copyFrom(final RogueMiracleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        rogueMiracleInfoData.copyFrom(other.rogueMiracleInfoData);
      }
      return this;
    }

    @Override
    public RogueMiracleInfo mergeFrom(final RogueMiracleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRogueMiracleInfoData()) {
        getMutableRogueMiracleInfoData().mergeFrom(other.rogueMiracleInfoData);
      }
      return this;
    }

    @Override
    public RogueMiracleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueMiracleInfoData.clear();
      return this;
    }

    @Override
    public RogueMiracleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueMiracleInfoData.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueMiracleInfo)) {
        return false;
      }
      RogueMiracleInfo other = (RogueMiracleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasRogueMiracleInfoData() || rogueMiracleInfoData.equals(other.rogueMiracleInfoData));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(rogueMiracleInfoData);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueMiracleInfoData);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueMiracleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 34: {
            // rogueMiracleInfoData
            input.readMessage(rogueMiracleInfoData);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.rogueMiracleInfoData, rogueMiracleInfoData);
      }
      output.endObject();
    }

    @Override
    public RogueMiracleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1112331215:
          case 55601960: {
            if (input.isAtField(FieldNames.rogueMiracleInfoData)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueMiracleInfoData);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueMiracleInfo clone() {
      return new RogueMiracleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueMiracleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueMiracleInfo(), data).checkInitialized();
    }

    public static RogueMiracleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMiracleInfo(), input).checkInitialized();
    }

    public static RogueMiracleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMiracleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueMiracleInfo messages
     */
    public static MessageFactory<RogueMiracleInfo> getFactory() {
      return RogueMiracleInfoFactory.INSTANCE;
    }

    private enum RogueMiracleInfoFactory implements MessageFactory<RogueMiracleInfo> {
      INSTANCE;

      @Override
      public RogueMiracleInfo create() {
        return RogueMiracleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName rogueMiracleInfoData = FieldName.forField("rogueMiracleInfoData", "rogue_miracle_info_data");
    }
  }
}
