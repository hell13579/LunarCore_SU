// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueCurrentInfoOuterClass {
  /**
   * Protobuf type {@code RogueCurrentInfo}
   */
  public static final class RogueCurrentInfo extends ProtoMessage<RogueCurrentInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .RogueStatus status = 9;</code>
     */
    private int status;

    /**
     * <code>optional .RogueBuffInfo rogue_buff_info = 1;</code>
     */
    private final RogueBuffInfoOuterClass.RogueBuffInfo rogueBuffInfo = RogueBuffInfoOuterClass.RogueBuffInfo.newInstance();

    /**
     * <code>optional .BELMNIPGEDN LIJCHOCOPEK = 2;</code>
     */
    private final BELMNIPGEDNOuterClass.BELMNIPGEDN lIJCHOCOPEK = BELMNIPGEDNOuterClass.BELMNIPGEDN.newInstance();

    /**
     * <code>optional .AKKLFHFHPFN CKJPPDKJIOH = 4;</code>
     */
    private final AKKLFHFHPFNOuterClass.AKKLFHFHPFN cKJPPDKJIOH = AKKLFHFHPFNOuterClass.AKKLFHFHPFN.newInstance();

    /**
     * <code>optional .RogueCommonPendingAction initial_pending_action = 7;</code>
     */
    private final RogueCommonPendingActionOuterClass.RogueCommonPendingAction initialPendingAction = RogueCommonPendingActionOuterClass.RogueCommonPendingAction.newInstance();

    /**
     * <code>optional .RogueAvatarInfo rogue_avatar_info = 8;</code>
     */
    private final RogueAvatarInfoOuterClass.RogueAvatarInfo rogueAvatarInfo = RogueAvatarInfoOuterClass.RogueAvatarInfo.newInstance();

    /**
     * <code>optional .RogueMapInfo rogue_map_info = 10;</code>
     */
    private final RogueMapInfoOuterClass.RogueMapInfo rogueMapInfo = RogueMapInfoOuterClass.RogueMapInfo.newInstance();

    /**
     * <pre>
     *  miracle
     * </pre>
     *
     * <code>optional .RogueMiracleInfo JCDFAHJFOCC = 12;</code>
     */
    private final RogueMiracleInfoOuterClass.RogueMiracleInfo jCDFAHJFOCC = RogueMiracleInfoOuterClass.RogueMiracleInfo.newInstance();

    /**
     * <code>optional .LMDFPHAHJGL LBKELDKEMLF = 14;</code>
     */
    private final LMDFPHAHJGLOuterClass.LMDFPHAHJGL lBKELDKEMLF = LMDFPHAHJGLOuterClass.LMDFPHAHJGL.newInstance();

    private RogueCurrentInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueCurrentInfo}
     */
    public static RogueCurrentInfo newInstance() {
      return new RogueCurrentInfo();
    }

    /**
     * <code>optional .RogueStatus status = 9;</code>
     * @return whether the status field is set
     */
    public boolean hasStatus() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .RogueStatus status = 9;</code>
     * @return this
     */
    public RogueCurrentInfo clearStatus() {
      bitField0_ &= ~0x00000001;
      status = 0;
      return this;
    }

    /**
     * <code>optional .RogueStatus status = 9;</code>
     * @return the status
     */
    public RogueStatusOuterClass.RogueStatus getStatus() {
      return RogueStatusOuterClass.RogueStatus.forNumber(status);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link RogueCurrentInfo#getStatus()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getStatusValue() {
      return status;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link RogueStatusOuterClass.RogueStatus}. Setting an invalid value
     * can cause {@link RogueCurrentInfo#getStatus()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public RogueCurrentInfo setStatusValue(final int value) {
      bitField0_ |= 0x00000001;
      status = value;
      return this;
    }

    /**
     * <code>optional .RogueStatus status = 9;</code>
     * @param value the status to set
     * @return this
     */
    public RogueCurrentInfo setStatus(final RogueStatusOuterClass.RogueStatus value) {
      bitField0_ |= 0x00000001;
      status = value.getNumber();
      return this;
    }

    /**
     * <code>optional .RogueBuffInfo rogue_buff_info = 1;</code>
     * @return whether the rogueBuffInfo field is set
     */
    public boolean hasRogueBuffInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .RogueBuffInfo rogue_buff_info = 1;</code>
     * @return this
     */
    public RogueCurrentInfo clearRogueBuffInfo() {
      bitField0_ &= ~0x00000002;
      rogueBuffInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueBuffInfo rogue_buff_info = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueBuffInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueBuffInfoOuterClass.RogueBuffInfo getRogueBuffInfo() {
      return rogueBuffInfo;
    }

    /**
     * <code>optional .RogueBuffInfo rogue_buff_info = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueBuffInfoOuterClass.RogueBuffInfo getMutableRogueBuffInfo() {
      bitField0_ |= 0x00000002;
      return rogueBuffInfo;
    }

    /**
     * <code>optional .RogueBuffInfo rogue_buff_info = 1;</code>
     * @param value the rogueBuffInfo to set
     * @return this
     */
    public RogueCurrentInfo setRogueBuffInfo(final RogueBuffInfoOuterClass.RogueBuffInfo value) {
      bitField0_ |= 0x00000002;
      rogueBuffInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .BELMNIPGEDN LIJCHOCOPEK = 2;</code>
     * @return whether the lIJCHOCOPEK field is set
     */
    public boolean hasLIJCHOCOPEK() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .BELMNIPGEDN LIJCHOCOPEK = 2;</code>
     * @return this
     */
    public RogueCurrentInfo clearLIJCHOCOPEK() {
      bitField0_ &= ~0x00000004;
      lIJCHOCOPEK.clear();
      return this;
    }

    /**
     * <code>optional .BELMNIPGEDN LIJCHOCOPEK = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLIJCHOCOPEK()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public BELMNIPGEDNOuterClass.BELMNIPGEDN getLIJCHOCOPEK() {
      return lIJCHOCOPEK;
    }

    /**
     * <code>optional .BELMNIPGEDN LIJCHOCOPEK = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public BELMNIPGEDNOuterClass.BELMNIPGEDN getMutableLIJCHOCOPEK() {
      bitField0_ |= 0x00000004;
      return lIJCHOCOPEK;
    }

    /**
     * <code>optional .BELMNIPGEDN LIJCHOCOPEK = 2;</code>
     * @param value the lIJCHOCOPEK to set
     * @return this
     */
    public RogueCurrentInfo setLIJCHOCOPEK(final BELMNIPGEDNOuterClass.BELMNIPGEDN value) {
      bitField0_ |= 0x00000004;
      lIJCHOCOPEK.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .AKKLFHFHPFN CKJPPDKJIOH = 4;</code>
     * @return whether the cKJPPDKJIOH field is set
     */
    public boolean hasCKJPPDKJIOH() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .AKKLFHFHPFN CKJPPDKJIOH = 4;</code>
     * @return this
     */
    public RogueCurrentInfo clearCKJPPDKJIOH() {
      bitField0_ &= ~0x00000008;
      cKJPPDKJIOH.clear();
      return this;
    }

    /**
     * <code>optional .AKKLFHFHPFN CKJPPDKJIOH = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCKJPPDKJIOH()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public AKKLFHFHPFNOuterClass.AKKLFHFHPFN getCKJPPDKJIOH() {
      return cKJPPDKJIOH;
    }

    /**
     * <code>optional .AKKLFHFHPFN CKJPPDKJIOH = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public AKKLFHFHPFNOuterClass.AKKLFHFHPFN getMutableCKJPPDKJIOH() {
      bitField0_ |= 0x00000008;
      return cKJPPDKJIOH;
    }

    /**
     * <code>optional .AKKLFHFHPFN CKJPPDKJIOH = 4;</code>
     * @param value the cKJPPDKJIOH to set
     * @return this
     */
    public RogueCurrentInfo setCKJPPDKJIOH(final AKKLFHFHPFNOuterClass.AKKLFHFHPFN value) {
      bitField0_ |= 0x00000008;
      cKJPPDKJIOH.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueCommonPendingAction initial_pending_action = 7;</code>
     * @return whether the initialPendingAction field is set
     */
    public boolean hasInitialPendingAction() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .RogueCommonPendingAction initial_pending_action = 7;</code>
     * @return this
     */
    public RogueCurrentInfo clearInitialPendingAction() {
      bitField0_ &= ~0x00000010;
      initialPendingAction.clear();
      return this;
    }

    /**
     * <code>optional .RogueCommonPendingAction initial_pending_action = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableInitialPendingAction()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueCommonPendingActionOuterClass.RogueCommonPendingAction getInitialPendingAction() {
      return initialPendingAction;
    }

    /**
     * <code>optional .RogueCommonPendingAction initial_pending_action = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueCommonPendingActionOuterClass.RogueCommonPendingAction getMutableInitialPendingAction(
        ) {
      bitField0_ |= 0x00000010;
      return initialPendingAction;
    }

    /**
     * <code>optional .RogueCommonPendingAction initial_pending_action = 7;</code>
     * @param value the initialPendingAction to set
     * @return this
     */
    public RogueCurrentInfo setInitialPendingAction(
        final RogueCommonPendingActionOuterClass.RogueCommonPendingAction value) {
      bitField0_ |= 0x00000010;
      initialPendingAction.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueAvatarInfo rogue_avatar_info = 8;</code>
     * @return whether the rogueAvatarInfo field is set
     */
    public boolean hasRogueAvatarInfo() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional .RogueAvatarInfo rogue_avatar_info = 8;</code>
     * @return this
     */
    public RogueCurrentInfo clearRogueAvatarInfo() {
      bitField0_ &= ~0x00000020;
      rogueAvatarInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueAvatarInfo rogue_avatar_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueAvatarInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueAvatarInfoOuterClass.RogueAvatarInfo getRogueAvatarInfo() {
      return rogueAvatarInfo;
    }

    /**
     * <code>optional .RogueAvatarInfo rogue_avatar_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueAvatarInfoOuterClass.RogueAvatarInfo getMutableRogueAvatarInfo() {
      bitField0_ |= 0x00000020;
      return rogueAvatarInfo;
    }

    /**
     * <code>optional .RogueAvatarInfo rogue_avatar_info = 8;</code>
     * @param value the rogueAvatarInfo to set
     * @return this
     */
    public RogueCurrentInfo setRogueAvatarInfo(
        final RogueAvatarInfoOuterClass.RogueAvatarInfo value) {
      bitField0_ |= 0x00000020;
      rogueAvatarInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueMapInfo rogue_map_info = 10;</code>
     * @return whether the rogueMapInfo field is set
     */
    public boolean hasRogueMapInfo() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional .RogueMapInfo rogue_map_info = 10;</code>
     * @return this
     */
    public RogueCurrentInfo clearRogueMapInfo() {
      bitField0_ &= ~0x00000040;
      rogueMapInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueMapInfo rogue_map_info = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueMapInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueMapInfoOuterClass.RogueMapInfo getRogueMapInfo() {
      return rogueMapInfo;
    }

    /**
     * <code>optional .RogueMapInfo rogue_map_info = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueMapInfoOuterClass.RogueMapInfo getMutableRogueMapInfo() {
      bitField0_ |= 0x00000040;
      return rogueMapInfo;
    }

    /**
     * <code>optional .RogueMapInfo rogue_map_info = 10;</code>
     * @param value the rogueMapInfo to set
     * @return this
     */
    public RogueCurrentInfo setRogueMapInfo(final RogueMapInfoOuterClass.RogueMapInfo value) {
      bitField0_ |= 0x00000040;
      rogueMapInfo.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  miracle
     * </pre>
     *
     * <code>optional .RogueMiracleInfo JCDFAHJFOCC = 12;</code>
     * @return whether the jCDFAHJFOCC field is set
     */
    public boolean hasJCDFAHJFOCC() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <pre>
     *  miracle
     * </pre>
     *
     * <code>optional .RogueMiracleInfo JCDFAHJFOCC = 12;</code>
     * @return this
     */
    public RogueCurrentInfo clearJCDFAHJFOCC() {
      bitField0_ &= ~0x00000080;
      jCDFAHJFOCC.clear();
      return this;
    }

    /**
     * <pre>
     *  miracle
     * </pre>
     *
     * <code>optional .RogueMiracleInfo JCDFAHJFOCC = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableJCDFAHJFOCC()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueMiracleInfoOuterClass.RogueMiracleInfo getJCDFAHJFOCC() {
      return jCDFAHJFOCC;
    }

    /**
     * <pre>
     *  miracle
     * </pre>
     *
     * <code>optional .RogueMiracleInfo JCDFAHJFOCC = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueMiracleInfoOuterClass.RogueMiracleInfo getMutableJCDFAHJFOCC() {
      bitField0_ |= 0x00000080;
      return jCDFAHJFOCC;
    }

    /**
     * <pre>
     *  miracle
     * </pre>
     *
     * <code>optional .RogueMiracleInfo JCDFAHJFOCC = 12;</code>
     * @param value the jCDFAHJFOCC to set
     * @return this
     */
    public RogueCurrentInfo setJCDFAHJFOCC(
        final RogueMiracleInfoOuterClass.RogueMiracleInfo value) {
      bitField0_ |= 0x00000080;
      jCDFAHJFOCC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .LMDFPHAHJGL LBKELDKEMLF = 14;</code>
     * @return whether the lBKELDKEMLF field is set
     */
    public boolean hasLBKELDKEMLF() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional .LMDFPHAHJGL LBKELDKEMLF = 14;</code>
     * @return this
     */
    public RogueCurrentInfo clearLBKELDKEMLF() {
      bitField0_ &= ~0x00000100;
      lBKELDKEMLF.clear();
      return this;
    }

    /**
     * <code>optional .LMDFPHAHJGL LBKELDKEMLF = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLBKELDKEMLF()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public LMDFPHAHJGLOuterClass.LMDFPHAHJGL getLBKELDKEMLF() {
      return lBKELDKEMLF;
    }

    /**
     * <code>optional .LMDFPHAHJGL LBKELDKEMLF = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public LMDFPHAHJGLOuterClass.LMDFPHAHJGL getMutableLBKELDKEMLF() {
      bitField0_ |= 0x00000100;
      return lBKELDKEMLF;
    }

    /**
     * <code>optional .LMDFPHAHJGL LBKELDKEMLF = 14;</code>
     * @param value the lBKELDKEMLF to set
     * @return this
     */
    public RogueCurrentInfo setLBKELDKEMLF(final LMDFPHAHJGLOuterClass.LMDFPHAHJGL value) {
      bitField0_ |= 0x00000100;
      lBKELDKEMLF.copyFrom(value);
      return this;
    }

    @Override
    public RogueCurrentInfo copyFrom(final RogueCurrentInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        status = other.status;
        rogueBuffInfo.copyFrom(other.rogueBuffInfo);
        lIJCHOCOPEK.copyFrom(other.lIJCHOCOPEK);
        cKJPPDKJIOH.copyFrom(other.cKJPPDKJIOH);
        initialPendingAction.copyFrom(other.initialPendingAction);
        rogueAvatarInfo.copyFrom(other.rogueAvatarInfo);
        rogueMapInfo.copyFrom(other.rogueMapInfo);
        jCDFAHJFOCC.copyFrom(other.jCDFAHJFOCC);
        lBKELDKEMLF.copyFrom(other.lBKELDKEMLF);
      }
      return this;
    }

    @Override
    public RogueCurrentInfo mergeFrom(final RogueCurrentInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasStatus()) {
        setStatusValue(other.status);
      }
      if (other.hasRogueBuffInfo()) {
        getMutableRogueBuffInfo().mergeFrom(other.rogueBuffInfo);
      }
      if (other.hasLIJCHOCOPEK()) {
        getMutableLIJCHOCOPEK().mergeFrom(other.lIJCHOCOPEK);
      }
      if (other.hasCKJPPDKJIOH()) {
        getMutableCKJPPDKJIOH().mergeFrom(other.cKJPPDKJIOH);
      }
      if (other.hasInitialPendingAction()) {
        getMutableInitialPendingAction().mergeFrom(other.initialPendingAction);
      }
      if (other.hasRogueAvatarInfo()) {
        getMutableRogueAvatarInfo().mergeFrom(other.rogueAvatarInfo);
      }
      if (other.hasRogueMapInfo()) {
        getMutableRogueMapInfo().mergeFrom(other.rogueMapInfo);
      }
      if (other.hasJCDFAHJFOCC()) {
        getMutableJCDFAHJFOCC().mergeFrom(other.jCDFAHJFOCC);
      }
      if (other.hasLBKELDKEMLF()) {
        getMutableLBKELDKEMLF().mergeFrom(other.lBKELDKEMLF);
      }
      return this;
    }

    @Override
    public RogueCurrentInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      status = 0;
      rogueBuffInfo.clear();
      lIJCHOCOPEK.clear();
      cKJPPDKJIOH.clear();
      initialPendingAction.clear();
      rogueAvatarInfo.clear();
      rogueMapInfo.clear();
      jCDFAHJFOCC.clear();
      lBKELDKEMLF.clear();
      return this;
    }

    @Override
    public RogueCurrentInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueBuffInfo.clearQuick();
      lIJCHOCOPEK.clearQuick();
      cKJPPDKJIOH.clearQuick();
      initialPendingAction.clearQuick();
      rogueAvatarInfo.clearQuick();
      rogueMapInfo.clearQuick();
      jCDFAHJFOCC.clearQuick();
      lBKELDKEMLF.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCurrentInfo)) {
        return false;
      }
      RogueCurrentInfo other = (RogueCurrentInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasStatus() || status == other.status)
        && (!hasRogueBuffInfo() || rogueBuffInfo.equals(other.rogueBuffInfo))
        && (!hasLIJCHOCOPEK() || lIJCHOCOPEK.equals(other.lIJCHOCOPEK))
        && (!hasCKJPPDKJIOH() || cKJPPDKJIOH.equals(other.cKJPPDKJIOH))
        && (!hasInitialPendingAction() || initialPendingAction.equals(other.initialPendingAction))
        && (!hasRogueAvatarInfo() || rogueAvatarInfo.equals(other.rogueAvatarInfo))
        && (!hasRogueMapInfo() || rogueMapInfo.equals(other.rogueMapInfo))
        && (!hasJCDFAHJFOCC() || jCDFAHJFOCC.equals(other.jCDFAHJFOCC))
        && (!hasLBKELDKEMLF() || lBKELDKEMLF.equals(other.lBKELDKEMLF));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeEnumNoTag(status);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(rogueBuffInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(lIJCHOCOPEK);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(cKJPPDKJIOH);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(initialPendingAction);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(rogueAvatarInfo);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(rogueMapInfo);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(jCDFAHJFOCC);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(lBKELDKEMLF);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(status);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueBuffInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(lIJCHOCOPEK);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(cKJPPDKJIOH);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(initialPendingAction);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueAvatarInfo);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueMapInfo);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(jCDFAHJFOCC);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(lBKELDKEMLF);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCurrentInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // status
            final int value = input.readInt32();
            if (RogueStatusOuterClass.RogueStatus.forNumber(value) != null) {
              status = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // rogueBuffInfo
            input.readMessage(rogueBuffInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // lIJCHOCOPEK
            input.readMessage(lIJCHOCOPEK);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // cKJPPDKJIOH
            input.readMessage(cKJPPDKJIOH);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // initialPendingAction
            input.readMessage(initialPendingAction);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // rogueAvatarInfo
            input.readMessage(rogueAvatarInfo);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // rogueMapInfo
            input.readMessage(rogueMapInfo);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // jCDFAHJFOCC
            input.readMessage(jCDFAHJFOCC);
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // lBKELDKEMLF
            input.readMessage(lBKELDKEMLF);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.status, status, RogueStatusOuterClass.RogueStatus.converter());
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.rogueBuffInfo, rogueBuffInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.lIJCHOCOPEK, lIJCHOCOPEK);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.cKJPPDKJIOH, cKJPPDKJIOH);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.initialPendingAction, initialPendingAction);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeMessage(FieldNames.rogueAvatarInfo, rogueAvatarInfo);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeMessage(FieldNames.rogueMapInfo, rogueMapInfo);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeMessage(FieldNames.jCDFAHJFOCC, jCDFAHJFOCC);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.lBKELDKEMLF, lBKELDKEMLF);
      }
      output.endObject();
    }

    @Override
    public RogueCurrentInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -892481550: {
            if (input.isAtField(FieldNames.status)) {
              if (!input.trySkipNullValue()) {
                final RogueStatusOuterClass.RogueStatus value = input.readEnum(RogueStatusOuterClass.RogueStatus.converter());
                if (value != null) {
                  status = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1107898267:
          case -694847243: {
            if (input.isAtField(FieldNames.rogueBuffInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueBuffInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1408364589: {
            if (input.isAtField(FieldNames.lIJCHOCOPEK)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(lIJCHOCOPEK);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -607864511: {
            if (input.isAtField(FieldNames.cKJPPDKJIOH)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(cKJPPDKJIOH);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1863062071:
          case -579506119: {
            if (input.isAtField(FieldNames.initialPendingAction)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(initialPendingAction);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1966631135:
          case 667955439: {
            if (input.isAtField(FieldNames.rogueAvatarInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueAvatarInfo);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1711136528:
          case -1785128330: {
            if (input.isAtField(FieldNames.rogueMapInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueMapInfo);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1332097391: {
            if (input.isAtField(FieldNames.jCDFAHJFOCC)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(jCDFAHJFOCC);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -885627611: {
            if (input.isAtField(FieldNames.lBKELDKEMLF)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(lBKELDKEMLF);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCurrentInfo clone() {
      return new RogueCurrentInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCurrentInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCurrentInfo(), data).checkInitialized();
    }

    public static RogueCurrentInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCurrentInfo(), input).checkInitialized();
    }

    public static RogueCurrentInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCurrentInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCurrentInfo messages
     */
    public static MessageFactory<RogueCurrentInfo> getFactory() {
      return RogueCurrentInfoFactory.INSTANCE;
    }

    private enum RogueCurrentInfoFactory implements MessageFactory<RogueCurrentInfo> {
      INSTANCE;

      @Override
      public RogueCurrentInfo create() {
        return RogueCurrentInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName status = FieldName.forField("status");

      static final FieldName rogueBuffInfo = FieldName.forField("rogueBuffInfo", "rogue_buff_info");

      static final FieldName lIJCHOCOPEK = FieldName.forField("LIJCHOCOPEK");

      static final FieldName cKJPPDKJIOH = FieldName.forField("CKJPPDKJIOH");

      static final FieldName initialPendingAction = FieldName.forField("initialPendingAction", "initial_pending_action");

      static final FieldName rogueAvatarInfo = FieldName.forField("rogueAvatarInfo", "rogue_avatar_info");

      static final FieldName rogueMapInfo = FieldName.forField("rogueMapInfo", "rogue_map_info");

      static final FieldName jCDFAHJFOCC = FieldName.forField("JCDFAHJFOCC");

      static final FieldName lBKELDKEMLF = FieldName.forField("LBKELDKEMLF");
    }
  }
}
